harnessApiVersion: '1.0'
type: BLUE_GREEN
concurrencyStrategy: INFRA
envName: GCP BlueGreen Environment
failureStrategies:
- executionScope: WORKFLOW
  failureTypes:
  - APPLICATION_ERROR
  repairActionCode: ROLLBACK_WORKFLOW
  retryCount: 0
notificationRules:
- conditions:
  - FAILED
  executionScope: WORKFLOW
  notificationGroupAsExpression: false
  userGroupAsExpression: false
  userGroupNames:
  - Account Administrator
phases:
- type: KUBERNETES
  computeProviderName: GKE cluster
  daemonSet: false
  infraDefinitionName: GCP BlueGreen
  name: Blue/Green
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    steps:
    - type: K8S_BLUE_GREEN_DEPLOY
      name: Stage Deployment
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Verify
    steps:
    - type: SHELL_SCRIPT
      name: Shell Script
      properties:
        commandPath: null
        connectionAttributeName: null
        executeOnDelegate: true
        host: null
        includeInfraSelectors: false
        outputVars: ''
        publishAsVar: false
        scriptString: |-
          ### Before Swap ###
          env

          echo "k8s.stageServiceName -> ${k8s.stageServiceName}"
          echo "${service.name}"
        scriptType: BASH
        sshKeyRefName: null
        sweepingOutputName: null
        sweepingOutputScope: null
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    - type: BARRIER
      name: Barrier
      properties:
        identifier: SmokeTestBarrier
        timeoutMillis: 60000
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Route Update
    steps:
    - type: KUBERNETES_SWAP_SERVICE_SELECTORS
      name: Swap Primary with Stage
      properties:
        service1: ${k8s.primaryServiceName}
        service2: ${k8s.stageServiceName}
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    steps:
    - type: SHELL_SCRIPT
      name: Shell Script
      properties:
        commandPath: null
        connectionAttributeName: null
        executeOnDelegate: true
        host: null
        includeInfraSelectors: true
        outputVars: ''
        publishAsVar: false
        scriptString: "export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}\n\n### After Swap ###\n\n# Step 1: No changes in the default scripts that get all old version Deployments within the namespace, it just separates the output in a different line to be iterate later\nALL_DEPLOYMENTS_THAT_MATCH=$(kubectl get deploy -n ${infra.kubernetes.namespace} -o jsonpath='{.items[?(@.spec.selector.matchLabels.harness\\.io/color==\"'$(kubectl get service/${k8s.stageServiceName} -n ${infra.kubernetes.namespace} -o jsonpath='{.spec.selector.harness\\.io/color}')'\")].metadata.name}' | grep -o '[^ ]\\+')\n\n# Step 2: Get all deployments that match with our Unique label\nGET_DEPLOYMENT_BASED_ON_LABEL=$(kubectl get deploy -n ${infra.kubernetes.namespace} -l 'app-id=secondary' --no-headers -o custom-columns=':metadata.name ' | tr '\\n' ' ')\n\n# Iterate over the list we create in the Step 1\necho \"$ALL_DEPLOYMENTS_THAT_MATCH\" | while IFS= read -r line; do \n  # Will execute the downscale only for Deployment that is present in the deployment list we got from the Step 2\n\tif [[ $GET_DEPLOYMENT_BASED_ON_LABEL == *\"$line\"* ]]; then\n    echo \"Downscaling -> $line\"\n\t\tkubectl scale deploy -n ${infra.kubernetes.namespace} $line --replicas=0\n  fi\ndone\n\nexit 0"
        scriptType: BASH
        sshKeyRefName: null
        sweepingOutputName: null
        sweepingOutputScope: null
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    stepsInParallel: false
  provisionNodes: false
  serviceName: webfrontend-version2
  statefulSet: false
rollbackPhases:
- type: KUBERNETES
  computeProviderName: GKE cluster
  daemonSet: false
  infraDefinitionName: GCP BlueGreen
  name: Rollback Blue/Green
  phaseNameForRollback: Blue/Green
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Route Update
    phaseStepNameForRollback: Route Update
    statusForRollback: SUCCESS
    steps:
    - type: KUBERNETES_SWAP_SERVICE_SELECTORS
      name: Swap Primary with Stage
      properties:
        service1: ${k8s.primaryServiceName}
        service2: ${k8s.stageServiceName}
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    phaseStepNameForRollback: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: webfrontend-version2
  statefulSet: false
templatized: false
